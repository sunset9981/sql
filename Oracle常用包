Oracle常用包、存储过程、函数
常用包、存储过程
1 dbms_output
作用：输入和输出信息，使用过程PUT和PUT_LINES可以将信息发送到缓冲区，使用过程GET_LINE和GET_LINES可以显示缓冲区信息。
1.1 enable    
该过程用于激活对过程PUT，PUT_LINE，GET_LINE，GET_LINES的调用。
语法如下：
dbms_output.enable(buffer_size in integer default 20000);
1.2 disable
该过程用于禁止对过程PUT，PUT_LINE，GET_LINE，GET_LINES的调用。
语法如下：
dbms_output.disable;
1.3 put和put_line
过程put_line用于将一个完整行的信息写入到缓冲区中，过程put则用地分块建立行信息，当使用过程put_line时，会自动在行的尾部追加行结束符；当使用过程put时,需要使用过程new_line追加行结束符。
示例如下:
set serverout on
begin
  dbms_output.put_line('伟大的中华民族');
  dbms_output.put('中国');
  dbms_output.put(',伟大的祖国');
     dbms_output.new_line;
end;
   /
   伟大的中华民族
   中国,伟大的祖国
1.4 new_line
该过程用于在行的尾部追加行结束符。当使用过程PUT时，必须调用NEW_LINE过程来结束行。
1.5 get_line和get_lines
过程get_line用于取得缓冲区的单行信息，过程get_lines用于取得缓冲区的多行信息。
2 dbms_job
作用：安排和管理作业队列，通过使用作业，可以使ORACLE数据库定期执行特定的任务。
2.1 submit
用于建立一个新作业。当建立作业时，需要给作业要执行的操作，作业的下次运行日期及运行时间间隔。
语法如下：
dbms_out.submit (
      job out binary_integer, 
    what in varchar2,
      next_date in date default sysdate,
      interval in varchar2 default 'null',
      no_parse in boolean default false,
      instance in binary_integer default any_instance,
      force in boolean default false);
注：job用于指定作业编号；what用于指定作业要执行的操作；next_date用于指定作业的下次运行日期；interval用于指定运行作业的时间间隔；no_parse用于指定是否解析与作业相关的过程；instance用于指定哪个例程可以运行作业；force用于指定是否强制运行与作业相关的例程。
示例如下：
var jobno number
    begin
      dbms_job.submit(:jobno,
        'dbms_ddl.analyze_object(''table'',
        ''scott'',''emp'',''compute'');',
        sysdate,'sysdate+1');
      commit;
    end;
    /
2.2 remove
删除作业队列中的特定作业。
示例如下：
SQL>exec dbms_job.remove(1);
2.3 change
用于改变与作业相关的所有信息,包括作业操作,作业运行日期以及运行时间间隔等。
示例如下：
SQL>exec dbms_job.change(2,null,null,'sysdate+2');
2.4 what
用于改变作业要执行的操作。
示例如下：
SQL>exec dbms_job.what(2,'dbms_stats.gather_table_stats->(''scott'',''emp'');');    
2.5 next_date
用于改变作业的下次运行日期。
示例如下：
SQL>exec dbms_job.next_date('2','sysdate+1');
2.6 instance。
用于改变作业的例程。
示例如下：
SQL>exec dbms_job.instance(2,1);
2.7 interval
用于改变作业的运行时间间隔。
示例如下：
SQL>exec dbms_job.interval(2,'sysdate+1/24/60');
2.8 broken
用于设置作业的中断标识。
示例如下：
SQL>exec dbms_job.broken(2,true,'sysdate+1');
2.9 run
用于运行已存在的作业。
示例如下:
sql>exec dbms_job.run(1);
3 dbms_pipe
作用：在同一例程程的不同会话之间进行管道通信。
注意：如果用户要执行包dbms_pipe中的过程和函数，则必须要为用户授权。
sql>conn sys/oracle as sysdba;
sql>grant execute on dbms_pipe to scott;
3.1 create_pipe
该函数用于建立公用管道或私有管道。如果将参数private设置为TRUE，则建立私有管道；如果设置为FALSE，则建立公用管道。
示例如下：
declare
    falg int;
begin
      flag:=dbms_pipe.create_pipe('public_pipe',8192,false);
      if flag=0 then
         dbms_output.put_line('建立公用管道成功');
      end if;
end;
 /
3.2 pack_message
该过程用于将消息写入到本地消息缓冲区。
3.3 send_message
该函数用于将本地消息缓冲区中的内容发送到管道。
3.4 receive_message
该函数用于接收管道消息
3.5.next_item_type
该函数用于确定本地消息缓冲区下一项的数据类型，如果该函数返回0，则表示管道没有任何消息；如果返回6，则表示下一项的数据类型为number；如果返回9，则表示下一项的数据类型为varchar2；如果返回11，则表示下一项的数据类型为rowid；如果返回12，则表示下一项的数据类型为date；如果返回23，则表示下一项的数据类型为raw；
3.6 unpack_message
该过程用于将消息缓冲区的内容写入到变量中
3.7 remove_pipe
该函数用于删除已经建立的管道
3.8 purge
该过程用于清除管道中的内容
3.9 reset_buffer
该过程用于复位管道缓冲区
3.10.unique_session_name
  该函数用于为特定会话返回惟一的名称,并且名称的最长度为30字节
4 dbms_alert
作用：用于生成并传递数据库预警信息。使用包DBMS_ALERT，则必须以SYS登陆，为该用户授予执行权限.
sql>conn sys/oracle as sysdba
sql>grant execute on dbms_alert to scott;
4.1 register
注册预警事件。
示例如下：
sql>exec dbms_alter.register('alter1');
4.2 remove
删除会话不需要的预警事件。
4.3 removeall
删除当前会话所有已注册的预警事件。
语法如下：
dbms_alter.removeall;
4.4 set_defaults
设置检测预警事件的时间间隔,默认时间间隔为5秒。
4.5 signal
用于指定预警事件所对应的预警消息。
4.6 waitany
用于等待当前会话的任何预警事件，并且在预警事件发生时输出相应信息，在执行该过程之前，会隐含地发出COMMIT。
语法如下：
dbms_alter.waitany (
      name out varchar2,message out varchar2,
      status out integer,timeout in number default maxwait
    );
注：status用于返回状态值。返回0表示发生了预警事件；返回1表示超时；;timeout用于设置预警事件的超时时间。
4.7 .waitone
用于等待当前会话的特定预警事件，并且在发生预警事件时输出预警消息。
语法同上
5.dbms_transaction
作用：用于在过程、函数和包中执行SQL事务处理语句。
5.1 read_only
用于开始只读事务，其作用与SQL语句SET TRANSACTION READ ONLY完全相同。
5.2 read_write
用于开始读写事务,------------------------------------WRITE-------
5.3 advise_rollback
用于建议回退远程数据库的分布式事务
5.4 advise_nothing
用于建议远程数据库的分布式事务不进行任何处理
5.5 advise_commit
  用于建议提交远程数据库的分布式事务
5.6 user_rollback_segment
  用于指定事务所要使用的回滚段
5.7 commit_comment
  用于在提交事务时指定注释.
5.8 commit_force
  用于强制提交分布式事务.
5.9 commit
  用于提交当前事务
5.10 savepoint
  用于设置保存点
5.11 rollback
  用于回退当前事务
5.12 rollback_savepoint
  用于回退到保存点
5.13 rollback_force
  用于强制回退分布式事务
5.14 begin_discrete_transaction
  用于开始独立事务模式
5.15 .purge_mixed
  用于清除分布式事务的混合事务结果
5.16 purge_lost_db_entry
  用于清除本地数据库所记载的远程事务入口,该事务入口操作因为远程数据库问题未能在远程数据库完成.
5.17 local_transaction_id
  用于返回当前事务的事务标识号
5.18.step_id
  用于返回排序DML事务的惟一正整数
6.dbms_session
作用：提供了使用PL/SQL实现ALTER SESSION命令，SET ROLE命令和其他会话信息的方法.。
6.1 set_identifier
用于设置会话的客户ID号
6.2 set_context
用于设置应用上下文属性
6.3 clear_context
用于清除应用上下文的属性设置
6.4 clear_identifier
用于删除会话的set_client_id.
6.5 set_role
用于激活或禁止会话角色
6.6 set_sql_trace
用于激活或禁止当前会话的SQL跟踪
语法如下:
dbms_session.set_sql_trace(sql_strace boolean);
6.7 set_nls
用于设置NLS特征
语法如下:
dbms_session.set_nls(param varchar2,value varchar2);
6.8 close_database_link
用于关闭已经打开的数据库链
6.9 reset_package
用于复位当前会话的所有包,并且会释放包状态
6.10 modify_package_state
用于修改当前会话的PL/SQL程序单元的状态
语法如下:
dbms_session.modify_package_state(action_flags in pls_integer);
6.11 unique_session_id
用于返回当前会话的惟一ID标识符
6.12 is_role_enabled
用于确定当前会话是否激活了特定角色.
语法如下:
dbms_session.is_role_enabled(rolename varchar2)
return boolean;
6.13 is_session_alive
用于确定特定会话是否处于活动状态.
6.14 set_close_cached_open_cursors
用于打开或关闭close_cached_open_cursors
6.15 free_unused_user_meory
用于在执行了大内在操作(超过100K)之后回收未用内存
6.16 set_context
设置应用上下文属性的值
6.17 list_context
用于返回当前会话原命名空间和上下文列表
6.18 swith_current_consumer_group
用于改变当前会话的资源使用组
7 dbms_rowid
作用：用于在PL/SQL程序和SQL语句中取得行标识符的信息并建立ROWID，通过该包可以取得行所在的文件号，行所在文件的数据块号，行所在数据块的行号，以及数据库对象号等消息.
7.1 rowid_create
 建立ROWID
 语法如下:
 dbms_rowid.rowid_create (
 rowid_type in number,object_number in number,
 relative_fno in n umber,block_number in number,
 row_number in number)
 return rowid;
注：rowid_type用于指定ROWID类型(0：受限ROWID；1：扩展ROWID)；object_number用于指定数据对象号；relative_fno用于指定相对文件号；block_number用于指定在文件中的数据块号；row_number用于指定在数据块中的行号。
7.2 rowid_info
用于取得特定ROWID的详细信息.
7.3 rowid_type
用于返回特定ROWID的类型
7.4 rowid_object
用于取得特定ROWID所对应的数据对象号
7.5 rowid_relative_fno
用于取得特定ROWID所对应的相对文件号
7.6 rowid_block_number
 用于返回特定ROWID在数据文件中所对应的数据块号.
7.7 rowid_row_number
 用于返回特定ROWID在数据块中所对应的行号.
7.8 rowid_to_obsolute_fno
 用于返回特定ROWID所对应的绝对文件号
7.9 rowid_to_extended
 用于将受限rowid转变为扩展rowid
7.10 rowid_to_restricted
 用于将扩展rowid转换为受限rowid
7.11 rowid_verify
 检查是否可以将受限rowid转变为扩展rowid
8 dbms_rls
作用：只适用于Oracle Enterprise Edition，它用于实现精细访问控制,并且精细访问控制是通过在SQL语句中动态增加谓词(WHERE子句)来实现的。通过使用ORACLE的精细访问控制特征，可以使不同数据库用户在执行相同SQL语句时操作同一张表上的不同数据。
9 dbms_ddl
作用：提供了在PL/SQL块中执行DDL语句的方法，并且也提供了一些DDL的特殊管理方法。
10 dbms_shared_pool
作用：提供了对共享池的一些过程和函数访问，它使用户可以显示共享池中的对象尺寸，定对象到共享池，清除绑定到共享池的对象，为了使用该包，必须运行dbmspool.sql脚本来建立该包。
11 dbms_random
作用：提供了内置的随机数生成器，可以用于快速生成随机数。
12 dbms_logmnr
作用：通过使用包DBMS_LOGMNR和DBMS_LOGMNR_D，可以分析重做日志和归档日志所记载的事务变化，最终确定误操作(例如DROP TABLE)的时间，跟踪用户事务操作，跟踪并还原表的DML操作。
13 dbms_flashback
作用：用于激活或禁止会话的flashback特征，为了使得普通用户可以使用该包，必须要将执行该包的权限授予这些用户。
14 dbms_obfuscation_toolkit
作用：用于加密和解密数据，另外还可以生成密码检验和，通过加密输入数据，可以防止黑客或其他用户窃取私有数据；而通过结合使用加密和密码检验和，可以防止黑客破坏初加密的数据。当使用该包加密数据时，要求被加密数据的长度必须为8字节的整数倍；当使用DES算法加密数据时，密钥长度不能低于8字节；当使用DES3算法加密数据时，密钥长度不能低于16字节。
15 dbms_space
作用：用于分析段增长和空间的需求。
16 dbms_space_admin
作用：提供了局部管理表空间的功能。
17 dbms_tts
作用：用于检查表空间集合是否是自包含的，并在执行了检查之后，将违反自包含规则的信息写入到临时表TRANSPORT_SET_VIOLATIONS中。
18 dbms_repair
作用：用于检测，修复在表和索引上的损坏数据块。
19 dbms_resource_manager
作用：用于维护资源计划，资源使用组和资源计划指令。包dbms_resource_manager_privs用于维护与资源管理相关的权限。
20 dbms_stats
作用：用于搜集，查看，修改数据库对象的优化统计信息。
21 utl_file
作用：用于读写OS文件。使用该包访问OS文件时，必须要为OS目录建立相应的DIRECTORY对象。当用户要访问特定目录下的文件时，必须要具有读写DIRECTORY对象的权限。在使用UTL_FILE包之前，应首先建立DIRECTORY对象。
示例1：在PL/SQL 3.3以上的版本中，UTL_FILE包允许用户通过PL/SQL读写操作系统文件。
DECALRE 
FILE_HANDLE UTL_FILE.FILE_TYPE; 
BEGIN 
FILE_HANDLE:=UTL_FILE.FOPEN('C:\','TEST.TXT','A'); 
UTL_FILE.PUT_LINE(FILE_HANDLE,'HELLO,IT iS A TEST TXT FILE'); 
UTL_FILE.FCLOSE(FILE_HANDLE); 
END;
示例2：在Oracle中写操作系统文件，如写日志转自。
可以利用utl_file包，但是，在此之前，要注意设置好Utl_file_dir初始化参数
parameter:textContext in varchar2 日志内容
desc: ·写日志,把内容记到服务器指定目录下
·必须配置Utl_file_dir初始化参数，并保证日志路径与Utl_file_dir路径一致或者是其中一个
CREATE OR REPLACE PROCEDURE sp_Write_log(text_context VARCHAR2) IS
file_handle utl_file.file_type;
Write_content VARCHAR2(1024);
Write_file_name VARCHAR2(50);
BEGIN
--open file
write_file_name := 'db_alert.log';
file_handle := utl_file.fopen('/u01/logs',write_file_name,'a');
write_content := to_char(SYSDATE,'yyyy-mm-dd hh24:mi:ss')||'||'||text_context;
--write file
IF utl_file.is_open(file_handle) THEN
utl_file.put_line(file_handle,write_content);
END IF;
--close file
utl_file.fclose(file_handle);
EXCEPTION
WHEN OTHERS THEN
BEGIN
IF utl_file.is_open(file_handle) THEN
utl_file.fclose(file_handle);
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
END sp_Write_log;
22 utl_inaddr
作用：用于取得局域网或Internet环境中的主机名和IP地址。 
23 dbms_mail
连接oracle*mail
24 dbms_lock
进行复杂的锁机制管理。
25 dbms_lob
提供对 Oracle LOB数据类型进行操作的功能。
26 dbms_sql
允许用户使用动态SQL,构造和执行任意DML和DDL语句。
26.1 OPEN_CURSOR
返回新游标的ID值 
26.2 PARSE
解析要执行的语句 
26.3 BIND_VARIABLE
将给定的数量与特定的变量相连接 
26.4 DEFINE_COLOUMN
定义字段变量，其值对应于指定游标中某个位置元素的值（仅用于SELECT语句） 
26.5 EXECUTE
执行指定的游标 
26.6 EXECUTE_AND_FETCH
执行指定的游标并取记录 
26.7 FETCH_ROWS
从指定的游标中取出记录 
26.8 COLUMN_VALUE
返回游标中指定位置的元素 
26.9 IS_OPEN
当指定的游标状态为OPEN时返回真值 
26.10 CLOSE_CURSOR
关闭指定的游标并释放内存 
26.11 LAST_ERROR_POSITION
返回出错SQL语句的字节偏移量 
26.12 LAST_ROW_ID
返回最后一条记录的ROWID 
26.13 LAST_SQL_FUNCTION_CODE
返回语句的SQL FUNCTION CODE 
示例： 
   CREATE OR REPLACE    procedure dml_sql (the_rq varchar2) as 
       The_c1		 Integer; 
       The_result		 Integer;--dml_sql_result 
       M_jls			 number; 
       The_xh		 varchar2(2); 
   Begin 
      The_xh:=lpad(ltrim(the_rq),2,'0'); 
      The_C1 :=Dbms_sql.open_cursor; 
      Dbms_sql.parse(the_C1,'select count(*) from user_indexes  
             where table_name =''ZDCHB'''||the_xh,dbms_sql.v7); 
      Dbms_sql.define_column(the_c1,1,M_jls); 
      The_result:=Dbms_sql.execute(The_c1); 
      If dbms_sql.fetch_rows(cursor1) > 0 then 
          Dbms_sql.column_value(cursor1,1,M_jls); 
      End if;
      Dbms_sql.close_cursor(The_C1); 
   End;
27 dbms_xmldom
用DOM模型读写XML类型的数据。
28 dbms_xmlparser
XML解析,处理XML文档内容和结构。
29 dbms_xmlgen
将SQL 查询结果转换为规范的XML格式。
30 dbms_xmlquery 
提供将数据转换为XML类型的功能。
31 dbms_xslpocessor
提供XSLT功能，转换XML文档。
32 utl_smtp
在Oracle中发邮件转自
示例：
可以利用utl_smtp包发邮件
/****************************************************************************
parameter: Rcpter in varchar2 接收者邮箱
Mail_Content in Varchar2 邮件内容
desc: ·发送邮件到指定邮箱
·只能指定一个邮箱，如果需要发送到多个邮箱，需要另外的辅助程序
****************************************************************************
CREATE OR REPLACE PROCEDURE sp_send_mail( rcpter IN VARCHAR2,
mail_content IN VARCHAR2)
IS 
conn utl_smtp.connection;
--write title
PROCEDURE send_header(NAME IN VARCHAR2, HEADER IN VARCHAR2) AS
BEGIN
utl_smtp.write_data(conn, NAME||': '|| HEADER||utl_tcp.CRLF);
END;
BEGIN
--opne connect
conn := utl_smtp.open_connection('smtp.com');
utl_smtp.helo(conn, 'oracle');
utl_smtp.mail(conn, 'oracle info');
utl_smtp.rcpt(conn, Rcpter);
utl_smtp.open_data(conn);
--write title
send_header('From', 'Oracle Database');
send_header('To', '"Recipient" ');
send_header('Subject', 'DB Info');
--write mail content
utl_smtp.write_data(conn, utl_tcp.crlf || mail_content);
--close connect 
utl_smtp.close_data(conn);
utl_smtp.quit(conn);
EXCEPTION
WHEN utl_smtp.transient_error OR utl_smtp.permanent_error THEN
BEGIN
utl_smtp.quit(conn);
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
WHEN OTHERS THEN
NULL;
END sp_send_mail;
常用函数
数值函数
abs(m)
m的绝对值
mod(m,n) 
m被n除后的余数
power(m,n)
 m的n次方
round(m[,n])
 m四舍五入至小数点后n位的值（n缺省为0）
trunc(m[,n])
 m截断n位小数位的值（n缺省为0）
示例：
SELECT ROUND(15.193,1) "Round" FROM DUAL; 

     Round
----------
      15.2

SELECT ROUND(15.193,-1) "Round" FROM DUAL; 

     Round
----------
        20
分组函数：
avg([distinct/all] n)
 列n的平均值
count([all] *)
返回查询范围内的行数包括重复值和空值
count([distinct/all] n) 
非空值的行数
max([distinct/all] n) 
该列或表达式的最大值
min([distinct/all] n) 
该列或表达式的最小值
stdev([distinct/all] n) 
该列或表达式的标准偏差，忽略空值
sum([distinct/all] n) 
该列或表达式的总和
variance([distinct/all] n) 
该列或表达式的方差，忽略空值
示例：
SELECT COUNT(DISTINCT manager_id) "Managers" FROM employees;
  Managers
----------
        18

转换函数
nvl(m,n) 
如果m值为null,返回n,否则返回m。
to_char(m[,fmt]) 
m从一个数值转换为指定格式的字符串fmt缺省时，fmt值的宽度正好能容纳所有的有效数字。
to_number(st[,fmt]) 
st从字符型数据转换成按指定格式的数值，缺省时数值格式串的大小正好为整个数。
to_char()函数的格式：
---------------------------------
符号    说明
---------------------------------
9       每个9代表结果中的一位数字
0       代表要显示的先导0
$       美元符号打印在数的左边
L       任意的当地货币符号
.       打印十进制的小数点
,       打印代表千分位的逗号
---------------------------------
decode(条件,值1,翻译值1,值2,翻译值2,...值n,翻译值n,缺省值)
DECODE函数相当于一个联机IF 语句，该函数的含义如下：
IF 条件=值1 THEN
　　　　RETURN(翻译值1)
ELSIF 条件=值2 THEN
　　　　RETURN(翻译值2)
　　　　......
ELSIF 条件=值n THEN
　　　　RETURN(翻译值n)

ELSE
　　　　RETURN(缺省值)
END IF
case
具有IF-THEN-ELSE条件的功能。
语法如下
CASE expression
WHEN condition_1 THEN result_1
WHEN condition_2 THEN result_2
...
WHEN condition_n THEN result_n
ELSE result END
expression就是要与条件比较的值；条件condition_1到 condition_n必须具有相同的数据类型。条件是按列表顺序赋值，一旦一个条件为真了，case条件就会返回结果并且不会再次去执行该条件了；结果result_1到 result_必须具有相同的数据类型。一旦有条件成立，这就是返回的值；如果没有找到为真的条件，case将返回ELSE条件中值；如果省略了ELSE条件并且也没有找到为真的条件，case条件将返回NULL；在case条件中最多可以有255个比较，每个WHEN ... THEN子被认为两次比较。
示例：
1、select to_number('123.45')+to_number('234.56') from dual;
to_number('123.45')+to_number('234.56')
----------------------------------------
                               358.01
2、select to_char(987654321) from dual;
to_char(987654321)
------------------
987654321
3、select to_char(123,'$9,999,999') a,to_char(54321,'L9,999,999') b,to_char(9874321,'$9,999,999') c from dual;
a       b          c
------- ---------- -----------
$123    RMB54,321    $9,874,321
4、select to_char(1234.1234,'999,999.999') a,to_char(0.4567,'999,999.999') b,to_char(1.1,'099.999') from dual;;
a         b          c
--------- ---------- ------------
1,234.123 .457       001.100 

5、SELECT user_name, description, NVL(phone_number, '无') phone_number FROM phone_info_v
6、SELECT product_id,
       DECODE (warehouse_id, 1, 'Southlake', 
                             2, 'San Francisco', 
                             3, 'New Jersey', 
                             4, 'Seattle',
                                'Non-domestic') 
       "Location of inventory" FROM inventories
       WHERE product_id < 1775;
7、select table_name,
CASE owner
WHEN 'SYS' THEN 'The owner is SYS'
WHEN 'SYSTEM' THEN 'The owner is SYSTEM'
ELSE 'The owner is another value' END
from all_tables;

日期函数
add_months(d,n)  
日期d加n个月
last_day(d)  
包含d的月份的最后一天的日期
month_between(d,e) 
日期d与e之间的月份数，e先于d
new_time(d,a,b)  
a时区的日期和时间d在b时区的日期和时间
next_day(d,day)  
比日期d晚，由day指定的周几的日期
sysdate  
当前的系统日期和时间
greatest(d1,d2,...dn) 
给出的日期列表中最后的日期
least(d1,k2,...dn) 
给出的日期列表中最早的日期
to_char(d [,fmt]) 
日期d按fmt指定的格式转变成字符串
to_date(st [,fmt]) 
字符串st按fmt指定的格式转成日期值，若fmt忽略，st要用缺省格式
round(d [,fmt])  
日期d按fmt指定格式舍入到最近的日期
trunc(d [,fmt])  
日期d按fmt指定格式截断到最近的日期

日期格式：
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
格式代码　   	 	说明                              举例或可取值的范围
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
DD          		该月某一天  						1－3
DY          		三个大写字母表示的周几 			SUN，...SAT
DAY         		完整的周几，大写英文 			SUNDAY，...SATURDAY
MM           		月份   							1－12
MON　　　  		三个大写字母表示的月份 			JAN，...DEC
MONTH       		完整   							JANUARY,...DECEMBER
RM           		月份的罗马数字                   I,...XII
YY或YYYY          两位，四位数字年
HH:MI:SS　        时：分：秒
HH12或HH24　　  以12小时或24小时显示
MI　　　　　　     分
SS　　　　　　	    秒
AM或PM　　　　   上下午指示符
SP　　　　　　	    后缀SP要求拼写出任何数值字段	 FOUR
TH　　　　　　	    后缀TH表示添加的数字是序数　   4TH,1ST
FM            		前缀对月或日或年值，禁止填充
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

示例：
select to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') time from dual;
select to_date('2008-09-16 14:10:10','yyyy-mm-dd hh24:mi:ss') time from dual;
字符函数
initcap(st) 
返回st将每个单词的首字母大写，所有其他字母小写
lower(st) 
返回st将每个单词的字母全部小写
upper(st) 
返回st将每个单词的字母全部大写
concat(st1,st2)  
返回st为st2接st1的末尾（可用操作符"||"）
lpad(st1,n[,st2]) 
返回右对齐的st,st为在st1的左边用st2填充直至长度为n,st2的缺省为空格
rpad(st1,n[,st2]) 
返回左对齐的st,st为在st1的右边用st2填充直至长度为n,st2的缺省为空格
ltrim(st[,set])  
返回st,st为从左边删除set中字符直到第一个不是set中的字符。缺省时，指的是空格
rtrim(st[,set])  
返回st,st为从右边删除set中字符直到第一个不是set中的字符。缺省时，指的是空格
replace(st,search_st[,replace_st]) 
将每次在st中出现的search_st用replace_st替换，返回一个st。缺省时，删除search_st
substr(st,m[,n]) 
n=返回st串的子串，从m位置开始，取n个字符长。缺省时，一直返回到st末端
length(st) 
数值，返回st中的字符数
instr(st1,st2[,m[,n]])  
数值，返回st1从第m字符开始，st2第n次出现的位置，m及n的缺省值为1

示例：
1、select initcap('THOMAS'),initcap('thomas') from dual;
initca initca
------ ------
Thomas Thomas
2、select concat('abc','def') "first" from dual;
first
-----
abcdef
3、select 'abc'||' '||'def' "first" from dual;
first
-----
abc def
4、select lpad('abc',10),rpad('abc',5,'*') from dual;
LPAD('ABC',10) RPAD('ABC',5,'*')
-------------- -----------------
       abc       abc**
5、去掉地址字段末端的点及单词st和rd
SELECT RTRIM('BROWNINGyxXxy','xy') "RTRIM example"  FROM DUAL;
RTRIM examp
-----------
BROWNINGyxX
6、SELECT REPLACE('JACK and JUE','J','BL') "Changes" FROM DUAL;
Changes
--------------
BLACK and BLUE
7、select substr('archibald bearisol',6,9) a,substr('archibald bearisol',11) b from dual;
a         b
-------   -------
bald bear bearisol
8、select name,instr(name,' ') a,instr(name,' ',1,2) b from test;
name    a        b
------- -------- ---------
li lei  3        0
l i l   2        4
分析函数
row_number() over(partition by ... order by ...)
返回有序组中一行的偏移量
rank() over(partition by ... order by ...)
dense_rank() over(partition by ... order by ...) 
rank根据ORDER BY子句中表达式的值，从查询返回的每一行，计算它们与其它行的相对位置。组内的数据按ORDER BY子句排序，然后给每一行赋一个号，从而形成一个序列，该序列从1开始，往后累加。每次ORDER BY表达式的值发生变化时，该序列也随之增加。有同样值的行得到同样的数字序号。然而，如果两行的确得到同样的排序，则序数将随后跳跃。若两行序数为1，则没有序数2，序列将给组中的下一行分配值3，DENSE_RANK则没有任何跳跃。
count() over(partition by ... order by ...)
对一组内发生的事情进行累积计数。
max() over(partition by ... order by ...)
在一个组中的数据窗口中查找表达式的最大值。
min() over(partition by ... order by ...)
在一个组中的数据窗口中查找表达式的最小值
sum() over(partition by ... order by ...)
该函数计算组中表达式的累积和。
avg() over(partition by ... order by ...)
该函数计算组中表达式的平均值。
first_value() over(partition by ... order by ...)
返回组中数据窗口的第一个值
last_value() over(partition by ... order by ...)
返回组中数据窗口的最后一个值
lag() over(partition by ... order by ...)
访问组中当前行之前的行
lead() over(partition by ... order by ...)
访问组中当前行之后的行。

开窗函数指定了分析函数工作的数据窗口大小，举例如下：
over（order by salary） 按照salary排序进行累计，order by是个默认的开窗函数
over（partition by deptno）按照部门分区
over（order by salary range between 50 preceding and 150 following）
每行对应的数据窗口是之前行幅度值不超过50，之后行幅度值不超过150
over（order by salary rows between 50 preceding and 150 following）
每行对应的数据窗口是之前50行，之后150行
over（order by salary rows between unbounded preceding and unbounded following）
每行对应的数据窗口是从第一行到最后一行，等效：
over（order by salary range between unbounded preceding and unbounded following）

示例：
1、计算同一经理下员工的薪水累积值
SELECT manager_id, last_name, salary,
SUM (salary) OVER (PARTITION BY manager_id ORDER BY salary
RANGE UNBOUNDED PRECEDING) l_csum
FROM employees
WHERE manager_id in (101,103,108);
MANAGER_ID LAST_NAME SALARY L_CSUM
---------- ------------------------- ---------- ----------
101 Whalen 4400 4400
101 Mavris 6500 10900
101 Baer 10000 20900
101 Greenberg 12000 44900
101 Higgins 12000 44900
103 Lorentz 4200 4200
103 Austin 4800 13800
103 Pataballa 4800 13800
103 Ernst 6000 19800
108 Popp 6900 6900
2、下例返回每个员工再在每个部门中按员工号排序后的顺序号
SELECT department_id, last_name, employee_id, ROW_NUMBER()
OVER (PARTITION BY department_id ORDER BY employee_id) AS emp_id
FROM employees
WHERE department_id < 50;
DEPARTMENT_ID LAST_NAME EMPLOYEE_ID EMP_ID
------------- ------------------------- ----------- ----------
10 Whalen 200 1
20 Hartstein 201 1
20 Fay 202 2
30 Raphaely 114 1
30 Khoo 115 2
30 Baida 116 3
30 Tobias 117 4
30 Himuro 118 5
30 Colmenares 119 6
40 Mavris 203 1
3、下例中计算每个员工按部门分区再按薪水排序，依次出现的序列号

SELECT d.department_id , e.last_name, e.salary, RANK() 
OVER (PARTITION BY e.department_id ORDER BY e.salary) as drank
FROM employees e, departments d
WHERE e.department_id = d.department_id
AND d.department_id IN ('60', '90');
DEPARTMENT_ID LAST_NAME SALARY DRANK
------------- ------------------------- ---------- ----------
60 Lorentz 4200 1
60 Austin 4800 2
60 Pataballa 4800 2
60 Ernst 6000 4
60 Hunold 9000 5
90 Kochhar 17000 1
90 De Haan 17000 1
90 King 24000 3
4、返回按hire_date排序的前1行的salary值
SELECT last_name, hire_date, salary,
LAG(salary, 1, 0) OVER (ORDER BY hire_date) AS prev_sal
FROM employees
WHERE job_id = 'PU_CLERK';
LAST_NAME HIRE_DATE SALARY PREV_SAL
------------------------- ---------- ---------- ----------
Khoo 18-5月 -95 3100 0
Tobias 24-7月 -97 2800 3100
Baida 24-12月-97 2900 2800
Himuro 15-11月-98 2600 2900
Colmenares 10-8月 -99 2500 2600
5、按部门分区，再按佣金commission_pct排序，FIRST取出佣金最低的对应的所有行，然后前面的MAX函数从这个集合中取出薪水最低的值；LAST取出佣金最高的对应的所有行，然后前面的MIN函数从这个集合中取出薪水最高的值
SELECT last_name, department_id, salary,
MIN(salary) KEEP (DENSE_RANK FIRST ORDER BY commission_pct)
OVER (PARTITION BY department_id) "Worst",
MAX(salary) KEEP (DENSE_RANK LAST ORDER BY commission_pct)
OVER (PARTITION BY department_id) "Best"
FROM employees 
WHERE department_id in (20,80) 
ORDER BY department_id, salary;
LAST_NAME DEPARTMENT_ID SALARY Worst Best
---------- ------------- ---------- ---------- ----------
Fay 20 6000 6000 13000
Hartstein 20 13000 6000 13000
Kumar 80 6100 6100 14000
Banda 80 6200 6100 14000
Johnson 80 6200 6100 14000
Ande 80 6400 6100 14000
Lee 80 6800 6100 14000
Tuvault 80 7000 6100 14000
Sewall 80 7000 6100 14000
Marvins 80 7200 6100 14000
Bates 80 7300 6100 14000

